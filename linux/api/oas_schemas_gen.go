// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
)

func (s *ErrorResonseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// EncryptedMessage containing: {"host":"<hostname>","requestExpirationTime":"<datetime>"}.
// Ref: #/components/schemas/AuthRequest
type AuthRequest struct {
	EncryptedMessage EncryptedMessage `json:"encryptedMessage"`
}

// GetEncryptedMessage returns the value of EncryptedMessage.
func (s *AuthRequest) GetEncryptedMessage() EncryptedMessage {
	return s.EncryptedMessage
}

// SetEncryptedMessage sets the value of EncryptedMessage.
func (s *AuthRequest) SetEncryptedMessage(val EncryptedMessage) {
	s.EncryptedMessage = val
}

// EncryptedMessage containing: {"authenticated": true/false}.
// Ref: #/components/schemas/AuthResponse
type AuthResponse struct {
	EncryptedMessage        EncryptedMessage `json:"encryptedMessage"`
	RequestMessageSignature string           `json:"requestMessageSignature"`
}

// GetEncryptedMessage returns the value of EncryptedMessage.
func (s *AuthResponse) GetEncryptedMessage() EncryptedMessage {
	return s.EncryptedMessage
}

// GetRequestMessageSignature returns the value of RequestMessageSignature.
func (s *AuthResponse) GetRequestMessageSignature() string {
	return s.RequestMessageSignature
}

// SetEncryptedMessage sets the value of EncryptedMessage.
func (s *AuthResponse) SetEncryptedMessage(val EncryptedMessage) {
	s.EncryptedMessage = val
}

// SetRequestMessageSignature sets the value of RequestMessageSignature.
func (s *AuthResponse) SetRequestMessageSignature(val string) {
	s.RequestMessageSignature = val
}

func (*AuthResponse) getAuthenticationStatusRes() {}

type EncryptedMessage string

// Ref: #/components/schemas/ErrorResonse
type ErrorResonse struct {
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorResonse) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorResonse) SetError(val OptString) {
	s.Error = val
}

// ErrorResonseStatusCode wraps ErrorResonse with StatusCode.
type ErrorResonseStatusCode struct {
	StatusCode int
	Response   ErrorResonse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResonseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResonseStatusCode) GetResponse() ErrorResonse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResonseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResonseStatusCode) SetResponse(val ErrorResonse) {
	s.Response = val
}

type GetAuthenticationStatusBadRequest ErrorResonse

func (*GetAuthenticationStatusBadRequest) getAuthenticationStatusRes() {}

type GetAuthenticationStatusUnauthorized ErrorResonse

func (*GetAuthenticationStatusUnauthorized) getAuthenticationStatusRes() {}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
